from simulator import get_sensors, move_forward, move_backward, turn_left, turn_right, submit, set_map
# DO NOT MODIFY LINE 1
# You may import any libraries you want. But you may not import simulator_hidden

# Colors
black = (0,0,0)
white = (255,255,255)
gray = (100,100,100)
blue = (0,180,255)

##############################
#### Write your code here ####
##############################
def add(a,b):
	return ((a[0]+b[0],a[1]+b[1]))

N=(0,-1)
E=(1,0)
S=(0,1)
W=(-1,0)
lakes=[]
buildings=[]

class robot() :
	def __init__(self,mv,av,pos=(0,0),dir=S,end=0):
		self.mv = mv
		self.av = av
		self.pos = pos
		self.dir = dir
		self.end = end

	def seeright(self) :
		turn_right(int(self.av/2))
		if self.dir == E:
			self.dir = S
		elif self.dir == S:
			self.dir = W
		elif self.dir == W:
			self.dir = N
		elif self.dir == N:
			self.dir = E

	def seeleft(self) :
		turn_left(int(self.av/2))
		if self.dir == E:
			self.dir = N
		elif self.dir== N:
			self.dir = W
		elif self.dir == W:
			self.dir = S
		elif self.dir == S:
			self.dir = E
	def seeEast(self) :
		if self.dir==W:
			self.seeback()
		elif self.dir == N:
			self.seeright()
		elif self.dir == S:
			self.seeleft()
		elif self.dir == E:
			return
	def seeWest(self):
		if self.dir==E:
			self.seeback()
		elif self.dir == N:
			self.seeleft()
		elif self.dir == S:
			self.seeright()
		elif self.dir == W:
			return

	def seeback(self) :
		if self.dir == S or self.dir == E:
			self.seeleft()
			self.seeleft()
		else:
			self.seeright()
			self.seeright()

	def move(self):
		for i in range(self.mv):
			move_forward()
			if get_sensors()[0][1]==black:
				move_backward(i+1)
				self.end=max(self.end,self.pos[0])
				return False
		if get_sensors()[0][1] == blue and add(self.pos,self.dir) not in lakes:
			lakes.append(add(self.pos,self.dir))
		self.pos=add(self.pos,self.dir)
		print((self.pos),(self.dir))
		return True

	def obstacle(self):
		if -1<get_sensors()[1]<=4 :
			if add(self.pos,self.dir) not in buildings:
				buildings.append(add(self.pos,self.dir))
			return True

	def before(self):
		if self.dir == N:
			return self.pos[0],self.pos[1]-1 in buildings or self.pos[0]-1,self.pos[1]-1 in buildings or self.pos[0]-2,self.pos[1]-1 in buildings
		if self.dir == S:
			return self.pos[0],self.pos[1]-1 in buildings or self.pos[0]+1,self.pos[1]-1 in buildings or self.pos[0]+2,self.pos[1]-1 in buildings

	def check(self):
		if self.obstacle():
			#case 1
			if self.dir == S and self.pos[1]==0:
				self.seeleft()
				#case 1-1
				if self.obstacle():
					self.seeleft()
					self.move()
					self.seeright()
					self.move()
					self.move()
					self.seeright()
					self.move()
					self.move()
					self.seeright()
					self.move()
					self.seeleft()
					if self.move()==False:
						self.seeback()
						self.check()
						return
					self.seeright()
					self.move()
					self.seeleft()
					return
				self.move()
				self.seeright()
				#case 1-2
				if self.obstacle():
					self.seeleft()
					self.move()
					self.seeright
					self.move()
					if self.move()==False:
						self.seeback()
						self.move()
						self.seeleft()
						self.move()
						self.seeright()
						return
					self.seeright()
					self.move()
					self.move()
					self.seeleft()
					return
				self.move()
				if self.move()==False:
					self.seeback()
					return
				self.seeWest()
				if self.obstacle:
					self.seeleft()
					if self.move()==False:
						self.seeback()
						return
					self.seeWest()
					self.move()
					self.seeleft()
					return
				self.move()
				self.seeleft()
			#case 2	
			if self.dir == S and self.pos[1]!=0:
				if self.before():
					self.seeleft()
					if self.obstacle():
						self.seeleft()
						self.move()
						self.seeright()
						self.move()
						self.move()
						self.seeright()
						self.move()
						self.move()
						self.seeright()
						self.move()
						self.seeleft()
						if self.move()==False:
							self.seeback()
							self.check()
							return
						self.seeright()
						self.move()
						self.seeleft()
						return
					self.move()
					self.seeright()
					if self.obstacle():
						self.seeleft()
						self.move()
						self.seeright
						self.move()
						if self.move()==False:
							self.seeback()
							self.move()
							self.seeleft()
							self.move()
							self.seeright()
							return
						self.seeright()
						self.move()
						self.move()
						self.seeleft()
						return
					self.move()
					if self.move()==False:
						self.seeback()
						return
					self.seeWest()
					if self.obstacle:
						self.seeleft()
						if self.move()==False:
							self.seeback()
							return
						self.seeWest()
						self.move()
						self.seeleft()
						return
					self.move()
					self.seeleft()
					return
				if self.pos[0]==self.end-1:
					self.seeleft()
					self.move()
					self.seeright()
					self.move()
					self.seeback()
					return
				self.seeright()
				self.move()
				self.seeleft()
				self.move()
				self.move()
				self.seeleft()
				self.move()
				self.seeright()

			#case 3
			if self.dir == N :
				self.seeEast()
				self.check()
				self.move()
				self.seeleft()
				self.check()
				self.move()
				self.check()
				if self.move()==False:
					self.seeback()
					self.check
					return
				self.seeWest()
				self.check()
				self.move()
				self.seeright()
				self.stack=0
				self.check()
			if self.dir == E and self.stack == 1 :
				self.seeright()
				self.move()
				self.seeleft()
				return
'''
A=robot(45,180)
while len(lakes)!=5 or len(buildings)!=5:
	while A.obstacle:
		A.check()
	if A.move() == False:
		A.seeEast()
		A.check()
		A.move()
		if A.pos[1]==0:
			A.seeright()
		else:
			A.seeleft()
A.seeWest()
A.seeright()
while A.pos[0]!=0:
	if -1<get_sensors()[1]<4:
		A.seeWest()
		A.move()
		A.seeright()
	if A.move() == False:
		break
while A.pos!=(0,0):
	A.seeWest()
	if -1<get_sensors()[1]<4:
		A.seeleft()
		A.move()
		A.seeright()
		A.move()
		A.move()
		A.seeright()
		A.move()
		A.seeleft()
	if A.move() == False:
		break
submit(lakes,buildings)

'''




#### If you want to try moving around the map with your keyboard, uncomment the below lines 
import pygame
while True:
	pressed = pygame.key.get_pressed()
	if pressed[pygame.K_UP]: move_forward()
	if pressed[pygame.K_DOWN]: move_backward()
	if pressed[pygame.K_LEFT]: turn_left()
	if pressed[pygame.K_RIGHT]: turn_right()
	if pressed[pygame.K_n]: set_map((10,5), [(8,0), (4,9), (2,0), (3,3), (4,1)], [(7,2), (0,1), (2,3)])
	if pressed[pygame.K_c]: print(get_sensors())
	for event in pygame.event.get():
		if event.type == pygame.QUIT:
			exit("Closing...")